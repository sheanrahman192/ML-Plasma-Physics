#-*-Python-*-
# Created by rahmans at 20 April 2025  10:05

"""
This script builds a classifier database.
It assumes the threshold database has already been made, and uses that to get the suppression state info.

This will make the project very big, so use it carefully!

defaultVars parameters
----------------------
"""
from scipy.ndimage.filters import maximum_filter1d
from scipy.signal import argrelmin
import time
import matplotlib.backends  # .backend_pdf import PdfPages
import matplotlib.backends.backend_pdf  # import PdfPages

defaultVars()

betan_min = 1.0

shots = [175737, 179328, 179358, 179363]
# shots = [175737, 179328]
# rundays = []
# rundays = ['20220719', '20220830', '20220831A', '20220913']
rundays = OMFIT['rmp_rundays']

exclude_shots = [171167]
try:
    if OMFIT['SHOTS_ELMPMARKER_DIES']:
        exclude_shots += OMFIT['SHOTS_ELMPMARKER_DIES']
except ValueError as e:
    print(e)
    exclude_shots = exclude_shots

# this allows us to specify runday IDs instead of manually entering all the shot numbers
def get_d3d_run_shots(rundays):
    """Search the D3D relational database for shots corresponding to runs"""
    shots = []
    for runday in rundays:
        q = OMFITrdb(query="select * from shots where run='{}'".format(runday), db='d3drdb', server='d3drdb', by_column=False)
        run_shots = []
        if len(q):
            for k in q:
                if q[k]['SHOT_TYPE'] == 'plasma':
                    run_shots.append(q[k]['SHOT'])
                    shots.append(q[k]['SHOT'])
        if not len(shots):
            printe('{:} D3DRDB is empty'.format(runday))
        else:
            printi('Run {:} included shots {:}'.format(runday, run_shots))
    return shots


shots = sorted(set(shots).union(get_d3d_run_shots(rundays)).difference(exclude_shots))



# here is where we'll definte the data we want
params = {}
params['n_eped'] = 'prmtan_neped'
params['t_eped'] = 'prmtan_teped'
params['p_eped'] = 'prmtan_peped'
params['n_e'] = 'density'
params['betan'] = 'betan'
params['li'] = 'li'
params['q95'] = 'q95'
params['Ip'] = 'Ip'
params['bt0'] = 'bt0'
params['bt'] = 'bt'
params['kappa'] = 'kappa'
params['tribot'] = 'tribot'
params['tritop'] = 'tritop'
params['dR_sep'] = 'drsep'
params['zeff'] = 'zeff'
params['rotation_edge'] = 'cerqrotct7'
params['rotation_core'] = 'cerqrotct2'
params['iun2iamp'] = 'iun2iamp'
params['iln2iamp'] = 'iln2iamp'
params['iun3iamp'] = 'iun3iamp'
params['iln3iamp'] = 'iln3iamp'
params['iun2iphase'] = 'iun2iphase'
params['iln2iphase'] = 'iln2iphase'
params['iun3iphase'] = 'iun3iphase'
params['iln3iphase'] = 'iln3iphase'
params['density'] = 'density'
# TODO: add more


# get the threshold info from an existing table
thresh_table = OMFIT['THRESHOLD_DATABASE']

####
table_data = OMFIT['my_labels']['data']

# back up last one in case we accidentally ran this script
# and didn't actually mean to overwrite it!
OMFIT['CLASS_DATABASE_BACKUP'] = OMFIT.get('THRESHOLD_DATABASE', {})
# start a new database
table = OMFIT['CLASS_DATABASE'] = dict(shot=[], time=[], state=[], n=[])
for key in params.keys():
    table[key] = []


print('Gathering lots of data for shots:')
print(array(shots))
for shot in shots:
    if not shot in (OMFIT['my_labels']['data']['Shot']):
        continue
    # keep this first part in sync with the threshold database logic!
    try:
        betan = OMFITmdsValue(server='DIII-D', TDI='betan', shot=shot).xarray()
        density = OMFITmdsValue(server='DIII-D', TDI='density', shot=shot).xarray()
    except ValueError:
        continue  # if betan data doesn't exist it isn't a valid plasma shot
    print(f' > {shot}')

    # check for H-mode
    betan = betan[betan > betan_min]
    if len(betan) == 0:
        continue  # no H-mode data in this shot
    tgrid = betan['dim_0'].values[10:]  # ignore the first 200 ms when it is just getting into H-mode (to dynamic)
    betan = betan.sel(dim_0=tgrid, method='nearest')
    density = density.sel(dim_0=tgrid, method='nearest')

    # check that RMP is on
    try:
        iun2 = OMFITmdsValue(server='DIII-D', TDI='iun2iamp', shot=shot).xarray()
        iln2 = OMFITmdsValue(server='DIII-D', TDI='iln2iamp', shot=shot).xarray()
        iun3 = OMFITmdsValue(server='DIII-D', TDI='iun3iamp', shot=shot).xarray()
        iln3 = OMFITmdsValue(server='DIII-D', TDI='iln3iamp', shot=shot).xarray()
        rmpn2 = (iun2 + iln2).interp(dim_0=tgrid)
        rmpn3 = (iun3 + iln3).interp(dim_0=tgrid)
        rmp = rmpn2 + rmpn3
    except ValueError:
        continue  # we need the rmp info to work!

    try:
        time_threshold = 1
        slope_threshold = -1e3  # Define what constitutes a "rapid" decrease in RMP

        rapid_decrease_count = 0
        current_duration = 0
        start_time = rmp.coords['dim_0'][-1]
        rmp_slope = rmp.diff('dim_0')
        start_time = None
        slope_values = rmp_slope.values
        time_values = rmp_slope.coords['dim_0'].values
        for time, slope in zip(time_values, slope_values):
            if slope < slope_threshold:
                if start_time == None:
                    start_time = time
                current_duration += 1
            else:
                if current_duration >= time_threshold:
                    rapid_decrease_count += 1
                current_duration = 0
        if current_duration >= time_threshold:
            rapid_decrease_count += 1
        num_local_minima = len(argrelmin(rmp.values)[0])
        minimum_flip_period = min(np.diff(argrelmin(rmp.values)[0]))
        if (rapid_decrease_count > 5 or (minimum_flip_period >160 and num_local_minima > 5)) and (start_time is not None and start_time < 4000):
            print('rmp is flipping')
            continue # rmp is flipping
    except ValueError as e:
        print(e)
        continue

    # trim all other data to H-mode RMP times
    ivalid = where((betan > 1) & (rmp > 1e3))[0]
    tvalid = tgrid[ivalid]
    if len(tvalid) == 0:
        continue  # no H-mode RMP in this shot
    tmin = tvalid[0]
    tmax = tvalid[-1]


    # stat of new class database code

    # store the dominant n of rmp
    n = ones_like(tvalid) * 3.0
    n[rmpn2[ivalid] > rmpn3[ivalid]] = 2
    table['n'] = hstack((table['n'], n))



    # store the class/state

    table_data = OMFIT['my_labels']['data']
    ishot = where(table_data['Shot'] == shot)[0]
    t_start = table_data['t_start'][ishot]
    t_end = table_data['t_end'][ishot]
    Label = table_data['Label'][ishot]

    isstate = np.full(tvalid.shape, fill_value="N/A", dtype=object)
    for i, time in enumerate(t_start):
        isstate[tvalid >= time] = Label[i]
    isstate[tvalid > t_end[-1]] = "N/A"
    table['state'] = hstack((table['state'], isstate)).astype(str)





    # store the rest of the data
    table['shot'] = hstack((table['shot'], [shot] * len(tvalid))).astype(int)
    table['time'] = hstack((table['time'], tvalid)).astype(int)
    for key in params:
        try:
            data = OMFITmdsValue(server='DIII-D', TDI=params[key], shot=shot).xarray()
            vals = data.interp(dim_0=tvalid).values
        except Exception:
            vals = np.nan * tvalid
        table[key] = hstack((table[key], vals))



# print it to see what we got
df = DataFrame(table)
print(df)

OMFIT.save()
